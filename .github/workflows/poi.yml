# POI action CI CD pipeline
# For more samples to get started with GitHub Action workflows to deploy to Azure, refer to https://github.com/Azure/actions-workflow-samples
name: poi
on:
  push:
    branches: [ main ]
    paths:
      - 'apis/poi/**'
      - '**/*.yml'
  workflow_dispatch:
env:
  AZURE_WEBAPP_NAME: openhackheh1m9c5poi    # set this to your application's name
  AZURE_WEBAPP_PACKAGE_PATH: '/apis/poi'      # set this to the path to your web app project, defaults to the repository root
  DOTNET_VERSION: '3.1'                # set this to the node version to use
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}       # The GitHub token (if not provided the environment variable GITHUB_TOKEN will be used instead)
  APP_NAME: api-poi
  HEALTH_CHECK_POSTFIX: 'poi'
  
jobs:
  build-and-test:
    if: github.ref == 'refs/heads/main' #this may not be necessary, but can be used as a precaution
    name: Build and Test
    runs-on: ubuntu-latest
    environment: development
    steps:
    - uses: actions/checkout@v2
    - name: Setup .Net
      uses: actions/setup-dotnet@v1.8.2
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    - name: .net install, build, and test
      run: |
        cd ./apis/poi
        # Build and test the project, then
        # deploy to Azure Web App.
        dotnet build .
        dotnet test tests/UnitTests2/
    - name: Create an issue for POI
      uses: JasonEtco/create-an-issue@v2.6.0
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}       # The GitHub token (if not provided the environment variable GITHUB_TOKEN will be used instead)
      if: ${{ failure() }}
      
  Package-and-push:
    needs: build-and-test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Docker login
        uses: azure/docker-login@v1
        with:
            login-server: ${{ secrets.REGISTRY_LOGIN_SERVER }}
            username: ${{ secrets.ACR_USERNAME }}
            password: ${{ secrets.ACR_PASSWORD }}
          
      - name: push image to ACR
        run: |
          cd ./apis/poi/web
          docker build . -t devopsoh/${{ env.APP_NAME }}:${{ github.run_number }}
          docker tag devopsoh/${{ env.APP_NAME }}:${{ github.run_number }} ${{ secrets.REGISTRY_LOGIN_SERVER }}/devopsoh/${{ env.APP_NAME }}:${{ github.run_number }}
          docker push ${{ secrets.REGISTRY_LOGIN_SERVER }}/devopsoh/${{ env.APP_NAME }}:${{ github.run_number }}
        if: ${{ failure() }}
      - name: Create an issue for POI
        uses: JasonEtco/create-an-issue@v2.6.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}       # The GitHub token (if not provided the environment variable GITHUB_TOKEN will be used instead)
        
  
  release-staging:
    name: Deploy to Staging
    needs: Package-and-push
    runs-on: ubuntu-latest
    environment: staging
    steps:
    - name: Deploy to Staging
      run: |
        echo Release to Staging, run number: ${{ github.run_number }};
    - name: Azure WebApp
      uses: Azure/webapps-deploy@v2
      with:
        # Name of the Azure Web App
        app-name: ${{ env.AZURE_WEBAPP_NAME }}
        # Applies to Web Apps(Windows and Linux) and Web App Containers(linux). Multi container scenario not supported. Publish profile (*.publishsettings) file contents with Web Deploy secrets
        publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE_STAGING_POI }}
        # Enter an existing Slot other than the Production slot
        slot-name: staging # optional, default is production

        images: ${{ secrets.REGISTRY_LOGIN_SERVER }}/devopsoh/${{ env.APP_NAME }}:${{ github.run_number }}
    - name: Create an issue for POI
      uses: JasonEtco/create-an-issue@v2.6.0
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}       # The GitHub token (if not provided the environment variable GITHUB_TOKEN will be used instead)
      if: ${{ failure() }}
  
  
  HealthCheck-Staging:
    runs-on: ubuntu-latest
    needs: release-staging
    steps: 
    - name: Checkout the repo
      uses: actions/checkout@v2
    - name: API Health Check
      run: |
        cd .healthcheck
        chmod +x polling.sh
        ./polling.sh -i https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net/api/healthcheck/${{ env.HEALTH_CHECK_POSTFIX }}
      if: ${{ failure() }}
    - name: Create an issue for POI
      uses: JasonEtco/create-an-issue@v2.6.0
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}       # The GitHub token (if not provided the environment variable GITHUB_TOKEN will be used instead)

  release-production:
    name: Release Production
    needs: HealthCheck-Staging
    runs-on: ubuntu-latest
    environment: production
    steps:
    - name: Azure Login
      uses: Azure/login@v1.1
      with:
       creds: ${{ secrets.AZURE_CREDENTIALS }}
    - name: Relese Prod
      run: |
        echo Release to Prod   
        az webapp deployment slot swap --name openhackheh1m9c5poi --resource-group openhackheh1m9c5rg --slot staging --target-slot production      
      if: ${{ failure() }}
    - name: Create an issue for POI on prod swap
      uses: JasonEtco/create-an-issue@v2.6.0
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}       # The GitHub token (if not provided the environment variable GITHUB_TOKEN will be used instead)

  HealthCheck-PROD:
    runs-on: ubuntu-latest
    needs: release-production
    steps: 
    - name: Checkout the repo
      uses: actions/checkout@v2
    - name: API Health Check
      run: |
        cd .healthcheck
        chmod +x polling.sh
        ./polling.sh -i https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.blah/api/healthcheck/${{ env.HEALTH_CHECK_POSTFIX }}
      if: ${{ failure() }}
    - name: Create an issue for POI
      uses: JasonEtco/create-an-issue@v2.6.0
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}       # The GitHub token (if not provided the environment variable GITHUB_TOKEN will be used instead)
    - name: Rollback to staging
      run: |
        echo Rollback to Staging due to error 
        az webapp deployment slot swap --name openhackheh1m9c5poi --resource-group openhackheh1m9c5rg --slot staging --target-slot production
      
