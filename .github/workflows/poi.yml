# This workflow will build and push a node.js application to an Azure Web App when there is a push to the main branch.
#
# This workflow assumes you have already created the target Azure App Service web app.
# For instructions see https://docs.microsoft.com/azure/app-service/app-service-plan-manage#create-an-app-service-plan
#
# To configure this workflow: 
#
# 1. For Linux apps, add an app setting called WEBSITE_WEBDEPLOY_USE_SCM and set it to true in your app **before downloading the file**.
#      For more instructions see: https://docs.microsoft.com/azure/app-service/configure-common#configure-app-settings
#
# 2. Set up a secret in your repository named AZURE_WEBAPP_PUBLISH_PROFILE with the value of your Azure publish profile.
#    For instructions on obtaining the publish profile see: https://docs.microsoft.com/azure/app-service/deploy-github-actions#configure-the-github-secret
#
# 3. Change the values for the AZURE_WEBAPP_NAME, AZURE_WEBAPP_PACKAGE_PATH and NODE_VERSION environment variables  (below).
#
# For more information on GitHub Actions for Azure, refer to https://github.com/Azure/Actions
# For more samples to get started with GitHub Action workflows to deploy to Azure, refer to https://github.com/Azure/actions-workflow-samples
name: ci-poi
on:
  push:
    branches: [ main ]
    paths:
      - 'apis/poi/**'
  workflow_dispatch:
env:
  AZURE_WEBAPP_NAME: openhackheh1m9c5poi    # set this to your application's name
  AZURE_WEBAPP_PACKAGE_PATH: '/apis/poi'      # set this to the path to your web app project, defaults to the repository root
  DOTNET_VERSION: '3.1'                # set this to the node version to use
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}       # The GitHub token (if not provided the environment variable GITHUB_TOKEN will be used instead)
  APP_NAME: api-poi
  HEALTH_CHECK_POSTFIX: 'poi'
  
jobs:
  build-and-deploy:
    if: github.ref == 'refs/heads/main' #this may not be necessary, but can be used as a precaution
    name: Build and Deploy
    runs-on: ubuntu-latest
    environment: development
    steps:
    - uses: actions/checkout@v2
    - name: Setup .Net
      uses: actions/setup-dotnet@v1.8.2
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    - name: .net install, build, and test
      run: |
        cd ./apis/poi
        # Build and test the project, then
        # deploy to Azure Web App.
        dotnet build .
        dotnet test tests/UnitTests/
    - name: Create an issue for POI
      uses: JasonEtco/create-an-issue@v2.6.0
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}       # The GitHub token (if not provided the environment variable GITHUB_TOKEN will be used instead)
      if: ${{ failure() }}
    - name: Docker login
      uses: azure/docker-login@v1
      with:
          login-server: ${{ secrets.REGISTRY_LOGIN_SERVER }}
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}
    - name: Build and push
      run: |
        cd ./apis/poi/web
        docker build . -t devopsoh/${{ env.APP_NAME }}:${{ github.run_number }}
        docker tag devopsoh/${{ env.APP_NAME }}:${{ github.run_number }} ${{ secrets.REGISTRY_LOGIN_SERVER }}/devopsoh/${{ env.APP_NAME }}:${{ github.run_number }}
        docker push ${{ secrets.REGISTRY_LOGIN_SERVER }}/devopsoh/${{ env.APP_NAME }}:${{ github.run_number }}

  release-staging:
    name: Release Staging
    needs: build-and-deploy
    runs-on: ubuntu-latest
    environment: staging
    steps:
    - name: Relese Staging
      run: |
        echo Release to Staging, run number: ${{ github.run_number }};
    - name: Azure WebApp
      uses: Azure/webapps-deploy@v2
      with:
        # Name of the Azure Web App
        app-name: ${{ env.AZURE_WEBAPP_NAME }}
        # Applies to Web Apps(Windows and Linux) and Web App Containers(linux). Multi container scenario not supported. Publish profile (*.publishsettings) file contents with Web Deploy secrets
        publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE_STAGING_POI }}
        # Enter an existing Slot other than the Production slot
        slot-name: staging # optional, default is production
        # Applies to Web App only: Path to package or folder. *.zip, *.war, *.jar or a folder to deploy
        #package: # optional, default is .
        # Applies to Web App Containers only: Specify the fully qualified container image(s) name. For example, 'myregistry.azurecr.io/nginx:latest' or 'python:3.7.2-alpine/'. For multi-container scenario multiple container image names can be provided (multi-line separated)
        images: ${{ secrets.REGISTRY_LOGIN_SERVER }}/devopsoh/${{ env.APP_NAME }}:${{ github.run_number }}
        # Applies to Web App Containers only: Path of the Docker-Compose file. Should be a fully qualified path or relative to the default working directory. Required for multi-container scenario
        #configuration-file: # optional
        # Enter the start up command. For ex. dotnet run or dotnet run
        #startup-command: # optional
    - name: Checkout the repo
      uses: actions/checkout@v2
    - name: API Health Check
      run: |
        cd .healthcheck
        chmod +x polling.sh
        ./polling.sh -i https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net/api/healthcheck/${{ env.HEALTH_CHECK_POSTFIX }}

  # release-production:
  #   name: Release Production
  #   needs: release-staging
  #   runs-on: ubuntu-latest
  #   environment: production
  #   steps:
  #   - name: Relese Prod
  #     run: |
  #       echo Release to Prod   

#  ${{ github.run_id }}
#  ${{ github.run_number }}
